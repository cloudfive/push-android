buildscript {
    ext.kotlin_version = '1.4.32'
    ext.dokka_version = '0.9.16'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokka_version"
    }
}

repositories {
    jcenter()
    google()
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'

apply plugin: 'maven'
apply plugin: 'signing'

if (file('my.gradle').exists()) {
    apply from: 'my.gradle'
}

android {
    compileSdkVersion 27
    // Ideally, we would re-write CloudFivePush to use a newer HTTP library.
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName version

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.google.firebase:firebase-core:16.0.1"
    implementation "com.google.firebase:firebase-messaging:17.1.0"
}

group = "com.cloudfiveapp" // Maven Group ID for the artifact
archivesBaseName = "push-android"
version = "1.2.0"

def siteUrl = 'https://github.com/cloudfive/push-android' // Homepage URL of the library

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ossrhUsername = properties.getProperty('ossrhUsername')
def ossrhPassword = properties.getProperty('ossrhPassword')

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Cloudfive push-android'
                packaging 'jar'
                description 'Android client for push notifications from cloudfiveapp.com'
                url siteUrl

                scm {
                    connection 'scm:git:https://github.com/cloudfive/push-android.git'
                    developerConnection 'scm:git:https://github.com/cloudfive/push-android.git'
                    url 'https://github.com/cloudfive/push-android.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'brian'
                        name 'Brian Samson'
                        email 'brian@cloudfiveapp.com'
                    }

                    developer {
                        id 'brett'
                        name 'Brett Samson'
                    }

                    developer {
                        id 'alex'
                        name 'Alex Petitjean'
                    }
                }
            }
        }
    }
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

